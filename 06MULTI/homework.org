* DONE To start things off, let’s learn how to use the simulator to study how
  CLOSED: [2019-11-27 Wed 20:13]
to build an effective multi-processor scheduler. The first simulation
will run just one job, which has a run-time of 30, and a working-set
size of 200. Run this job (called job ’a’ here) on one simulated CPU
as follows: ./multi.py -n 1 -L a:30:200. How long will it
take to complete? Turn on the -c flag to see a final answer, and the
-t flag to see a tick-by-tick trace of the job and how it is scheduled.

30
* DONE Now increase the cache size so as to make the job’s working set
  CLOSED: [2019-11-27 Wed 20:13]
(size=200) fit into the cache (which, by default, is size=100); for
example, run ./multi.py -n 1 -L a:30:200 -M 300. Can
you predict how fast the job will run once it fits in cache? (hint:
remember the key parameter of the warm rate, which is set by the
-r flag) Check your answer by running with the solve flag (-c) en-
abled.

20. 

* DONE One cool thing about multi.py is that you can see more detail
  CLOSED: [2019-11-27 Wed 20:15]
about what is going on with different tracing flags. Run the same
simulation as above, but this time with time left tracing enabled
(-T). This flag shows both the job that was scheduled on a CPU
at each time step, as well as how much run-time that job has left
after each tick has run. What do you notice about how that second
column decreases?

After warming up, the last 20 runtime is completed in half the usual time.
* DONE Now add one more bit of tracing, to show the status of each CPU
  CLOSED: [2019-11-27 Wed 20:19]
cache for each job, with the -C flag. For each job, each cache will
either show a blank space (if the cache is cold for that job) or a ’w’
(if the cache is warm for that job). At what point does the cache
become warm for job ’a’ in this simple example? What happens
as you change the warmup time parameter (-w) to lower or higher
values than the default?

: python multi.py -n 1 -L a:30:100 -c -M 300 -T -C -w 10
It becomes warm at the beginning of timeslice 9.

: python multi.py -n 1 -L a:30:100 -c -M 300 -T -C -w 9
It becomes warm at the beginning of timeslice 8.
* DONE At this point, you should have a good idea of how the simula-
  CLOSED: [2019-11-27 Wed 20:24]
tor works for a single job running on a single CPU. But hey, isn’t
this a multi-processor CPU scheduling chapter? Oh yeah! So let’s
start working with multiple jobs. Specifically, let’s run the follow-
ing three jobs on a two-CPU system (i.e., type ./multi.py -n
2 -L a:100:100,b:100:50,c:100:50) Can you predict how
long this will take, given a round-robin centralized scheduler? Use
-c to see if you were right, and then dive down into details with -t

(/ 300 2) = 150.
Because RR does not take advantage of cache affinity.


: python multi.py -n 2 -L a:100:100,b:100:50,c:100:50 -c -T -C

: Finished time 150
: 
: Per-CPU stats
:   CPU 0  utilization 100.00 [ warm 0.00 ]
:   CPU 1  utilization 100.00 [ warm 0.00 ]
 

* DONE Now we’ll apply some explicit controls to study cache affinity, as
  CLOSED: [2019-11-27 Wed 21:02]
described in the chapter. To do this, you’ll need the -A flag. This
flag can be used to limit which CPUs the scheduler can place a par-
ticular job upon. In this case, let’s use it to place jobs ’b’ and ’c’ on
CPU 1, while restricting ’a’ to CPU 0. This magic is accomplished
by typing this ./multi.py -n 2 -L a:100:100,b:100:50,
c:100:50 -A a:0,b:1,c:1 ; don’t forget to turn on various trac-
ing options to see what is really happening! Can you predict how
fast this version will run? Why does it do better? Will other com-
binations of ’a’, ’b’, and ’c’ onto the two processors run faster or
slower?

Completion time reduced:
150 --> 110
Improvement of 25%

* DONE One interesting aspect of caching multiprocessors is the opportu-
  CLOSED: [2019-11-27 Wed 21:05]
nity for better-than-expected speed up of jobs when using multi-
ple CPUs (and their caches) as compared to running jobs on a sin-
gle processor. Specifically, when you run on N CPUs, sometimes
you can speed up by more than a factor of N , a situation entitled
super-linear speedup. To experiment with this, use the job descrip-
tion here (-L a:100:100,b:100:100,c:100:100) with a small
cache (-M 50) to create three jobs. Run this on systems with 1, 2,
and 3 CPUs (-n 1, -n 2, -n 3). Now, do the same, but with a
larger per-CPU cache of size 100. What do you notice about per-
formance as the number of CPUs scales? Use -c to confirm your
guesses, and other tracing flags to dive even deeper.

Cache can dramatically boost the performance of multi CPU using single queue scheduler!

* DONE One other aspect of the simulator worth studying is the per-CPU
  CLOSED: [2019-11-27 Wed 21:28]
scheduling option, the -p flag. Run with two CPUs again, and this
three job configuration (-L a:100:100,b:100:50,c:100:50).
How does this option do, as opposed to the hand-controlled affinity
limits you put in place above? How does performance change as
you alter the ’peek interval’ (-P) to lower or higher values? How
does this per-CPU approach work as the number of CPUs scales?

Per CPU queue utilise CPU and cache more, resulting in shorter completion time.
As Peek rate increases, CPU utilisation drops, because CPU does not steal job soon enough.

Given the limited cache, there is no clear winner in terms of scalability
: python multi.py -n 1 -j 16 -s 0 -c -p

Finished Time comparison
| n | per queue |  RR |
|---+-----------+-----|
| 1 |       940 | 940 |
| 2 |       480 | 470 |
| 3 |       330 | 320 |
| 4 |       250 | 240 |
| 5 |       205 | 200 |
| 6 |       210 | 170 |
| 7 |       180 | 150 |
| 8 |       150 | 130 |

* DONE Finally, feel free to just generate random workloads and see if you
  CLOSED: [2019-11-27 Wed 21:29]
can predict their performance on different numbers of processors,
cache sizes, and scheduling options. If you do this, you’ll soon be
a multi-processor scheduling master, which is a pretty awesome
thing to be. Good luck!
